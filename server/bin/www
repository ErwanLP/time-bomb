#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('module-alias/register');
let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
const GameController = require('@controllers/GameController');
const UserController = require('@controllers/UserController');
const clientTerminalVersion = require(
    './../../client-terminal/package').version;
checkVersion = (clientVersion) => clientVersion ? clientVersion ===
    clientTerminalVersion : true;

/**
 * Get port from environment and store in Express.
 */
require('dotenv').config({path: __dirname + '/./../../.env'});
let port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

const io = require('socket.io')(server);
io.on('connection', function(socket) {
  if (!socket.handshake.query.version ||
      checkVersion(socket.handshake.query.version)) {
    socket.emit('connection_success',
        JSON.stringify({version: clientTerminalVersion}));
    socket.on('user_create',
        UserController.createBySocket.bind(null, socket));
    socket.on('game_create',
        GameController.socketCreateGameInstance.bind(null, socket, io));
    socket.on('game_list',
        GameController.socketGetGames.bind(null, socket));
    socket.on('game_join',
        GameController.socketJoinGameInstance.bind(null, socket, io));
    socket.on('game_leave_lobby',
        GameController.socketLeaveGameInstance.bind(null, socket, io, 'LOBBY'));
    socket.on('game_leave',
        GameController.socketLeaveGameInstance.bind(null, socket, io, null));
    socket.on('game_start',
        GameController.socketStartGameInstance.bind(null, socket, io));
    socket.on('game_pick_card',
        GameController.socketPickCard.bind(null, socket, io));
    socket.on('game_user_message',
        GameController.socketMessage.bind(null, socket, io));
    socket.on('disconnect', function() {
      GameController.socketLeaveGameInstance(socket, io).then(
          () => {
            UserController.socketLeave(socket, io);
          }
      );
    });
    socket.on('admin', function(data) {
      let info = JSON.parse(data);
      if (info.type === 'purge' && info.name === 'Admin') {
        console.log('PURGE INSTANCES AND USERS');
        GameController.deleteAllInstance();
        UserController.deleteAllUser();
      }
    });
  } else {
    socket.emit('wrong_version', JSON.stringify({
      clientVersion: socket.handshake.query.version,
      expectedVersion: clientTerminalVersion
    }));
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
